// <auto-generated />
using System;
using KanbanBoard.Infrastructure.EFContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace KanbanBoard.Infrastructure.Migrations
{
    [DbContext(typeof(EfDbContext))]
    [Migration("20240503073215_Update_db")]
    partial class Update_db
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("KanbanBoard.Core.Models.Board", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Boards");

                    b.HasData(
                        new
                        {
                            Id = "6071b41a-0988-4f84-a530-cbae7783591b",
                            CreatedDate = new DateTime(2024, 5, 3, 7, 32, 15, 495, DateTimeKind.Utc).AddTicks(3632),
                            Description = "Develop a step-by-step interactive tutorial that guides new users through the key features and functionalities of the application.",
                            Title = "Revamping User Onboarding"
                        });
                });

            modelBuilder.Entity("KanbanBoard.Core.Models.Comment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IssueId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IssueId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("KanbanBoard.Core.Models.Issue", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("IssueType")
                        .HasColumnType("integer");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<string>("StatusId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("Issues");

                    b.HasData(
                        new
                        {
                            Id = "0f9c6748-38db-4f5e-9be2-321398750857",
                            CreatedDate = new DateTime(2024, 5, 3, 7, 32, 15, 495, DateTimeKind.Utc).AddTicks(3756),
                            Description = "Develop a step-by-step interactive tutorial that guides new users through the key features and functionalities of the application. This will improve user experience and decrease the learning curve for new users.",
                            IssueType = 0,
                            Order = 0,
                            Priority = 2,
                            StatusId = "48329129-80bd-44da-9ae6-3a487f870777",
                            Summary = " Create Interactive Tutorial for New Users"
                        },
                        new
                        {
                            Id = "45bc6968-889b-413e-9b8b-1f03f0529a57",
                            CreatedDate = new DateTime(2024, 5, 3, 7, 32, 15, 495, DateTimeKind.Utc).AddTicks(3763),
                            Description = "Design a user-friendly and informative welcome screen specifically optimized for mobile devices. This will ensure a smooth onboarding experience for users accessing the application on their phones.",
                            IssueType = 1,
                            Order = 1,
                            Priority = 4,
                            StatusId = "48329129-80bd-44da-9ae6-3a487f870777",
                            Summary = "Design Mobile-Friendly Welcome Screen"
                        },
                        new
                        {
                            Id = "8786657d-95f7-46f6-8224-7e56e921f6d9",
                            CreatedDate = new DateTime(2024, 5, 3, 7, 32, 15, 495, DateTimeKind.Utc).AddTicks(3767),
                            Description = "Investigate and fix the bug that is preventing welcome emails from being sent to new users upon registration. This will ensure users receive important information and next steps after signing up.",
                            IssueType = 2,
                            Order = 2,
                            Priority = 1,
                            StatusId = "48329129-80bd-44da-9ae6-3a487f870777",
                            Summary = "Welcome Email Not Sending to New Users"
                        });
                });

            modelBuilder.Entity("KanbanBoard.Core.Models.Status", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("BoardId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BoardId");

                    b.ToTable("Statuses");

                    b.HasData(
                        new
                        {
                            Id = "48329129-80bd-44da-9ae6-3a487f870777",
                            BoardId = "6071b41a-0988-4f84-a530-cbae7783591b",
                            CreatedDate = new DateTime(2024, 5, 3, 7, 32, 15, 495, DateTimeKind.Utc).AddTicks(3711),
                            Name = "To Do"
                        },
                        new
                        {
                            Id = "da6c5008-fa4c-460e-a336-042c4e7f410d",
                            BoardId = "6071b41a-0988-4f84-a530-cbae7783591b",
                            CreatedDate = new DateTime(2024, 5, 3, 7, 32, 15, 495, DateTimeKind.Utc).AddTicks(3715),
                            Name = "In Progress"
                        },
                        new
                        {
                            Id = "0e1deecf-7b72-4512-ae4d-620c6fd6a576",
                            BoardId = "6071b41a-0988-4f84-a530-cbae7783591b",
                            CreatedDate = new DateTime(2024, 5, 3, 7, 32, 15, 495, DateTimeKind.Utc).AddTicks(3718),
                            Name = "Testing"
                        },
                        new
                        {
                            Id = "be55f79e-3ad2-435e-a9ee-abc271818cff",
                            BoardId = "6071b41a-0988-4f84-a530-cbae7783591b",
                            CreatedDate = new DateTime(2024, 5, 3, 7, 32, 15, 495, DateTimeKind.Utc).AddTicks(3722),
                            Name = "Done"
                        });
                });

            modelBuilder.Entity("KanbanBoard.Core.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("TitleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("TitleId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("KanbanBoard.Core.Models.UserIssues", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("IssueId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IssueId1")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId1")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IssueId");

                    b.HasIndex("IssueId1");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("UserIssues");
                });

            modelBuilder.Entity("KanbanBoard.Core.Models.UserTitle", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UserTitles");

                    b.HasData(
                        new
                        {
                            Id = "067f31df-b1ea-4065-8044-11efc56e674f",
                            CreatedDate = new DateTime(2024, 5, 3, 7, 32, 15, 495, DateTimeKind.Utc).AddTicks(3409),
                            Title = "Software Developer"
                        },
                        new
                        {
                            Id = "a08d10e1-f7a1-44e3-8855-bb49b66be8ca",
                            CreatedDate = new DateTime(2024, 5, 3, 7, 32, 15, 495, DateTimeKind.Utc).AddTicks(3415),
                            Title = "Back End Developer"
                        },
                        new
                        {
                            Id = "a38da88c-1624-4828-a4a2-26322a83ef50",
                            CreatedDate = new DateTime(2024, 5, 3, 7, 32, 15, 495, DateTimeKind.Utc).AddTicks(3421),
                            Title = "Front End Developer"
                        },
                        new
                        {
                            Id = "c291e23a-8e76-43a1-821b-2e538f31dfda",
                            CreatedDate = new DateTime(2024, 5, 3, 7, 32, 15, 495, DateTimeKind.Utc).AddTicks(3440),
                            Title = "Software Engineer"
                        },
                        new
                        {
                            Id = "d82d5e4a-b0ed-4ac0-b1b5-8c2694fe4b85",
                            CreatedDate = new DateTime(2024, 5, 3, 7, 32, 15, 495, DateTimeKind.Utc).AddTicks(3444),
                            Title = "DevOps Engineer"
                        },
                        new
                        {
                            Id = "14dc479b-8def-4ec8-a435-184aa993e389",
                            CreatedDate = new DateTime(2024, 5, 3, 7, 32, 15, 495, DateTimeKind.Utc).AddTicks(3450),
                            Title = "Product Manager"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("KanbanBoard.Core.Models.Comment", b =>
                {
                    b.HasOne("KanbanBoard.Core.Models.Issue", "Issue")
                        .WithMany("Comments")
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KanbanBoard.Core.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Issue");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KanbanBoard.Core.Models.Issue", b =>
                {
                    b.HasOne("KanbanBoard.Core.Models.Status", "Status")
                        .WithMany("Issues")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("KanbanBoard.Core.Models.Status", b =>
                {
                    b.HasOne("KanbanBoard.Core.Models.Board", "Board")
                        .WithMany("Statuses")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Board");
                });

            modelBuilder.Entity("KanbanBoard.Core.Models.User", b =>
                {
                    b.HasOne("KanbanBoard.Core.Models.UserTitle", "Title")
                        .WithMany("Users")
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Title");
                });

            modelBuilder.Entity("KanbanBoard.Core.Models.UserIssues", b =>
                {
                    b.HasOne("KanbanBoard.Core.Models.Issue", null)
                        .WithMany("UserIssues")
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KanbanBoard.Core.Models.Issue", "Issue")
                        .WithMany()
                        .HasForeignKey("IssueId1");

                    b.HasOne("KanbanBoard.Core.Models.User", null)
                        .WithMany("UserIssues")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KanbanBoard.Core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId1");

                    b.Navigation("Issue");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("KanbanBoard.Core.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("KanbanBoard.Core.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KanbanBoard.Core.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("KanbanBoard.Core.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KanbanBoard.Core.Models.Board", b =>
                {
                    b.Navigation("Statuses");
                });

            modelBuilder.Entity("KanbanBoard.Core.Models.Issue", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("UserIssues");
                });

            modelBuilder.Entity("KanbanBoard.Core.Models.Status", b =>
                {
                    b.Navigation("Issues");
                });

            modelBuilder.Entity("KanbanBoard.Core.Models.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("UserIssues");
                });

            modelBuilder.Entity("KanbanBoard.Core.Models.UserTitle", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
